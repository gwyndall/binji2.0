{"version":3,"sources":["react-auth0-spa.jsx","components/NavBar.jsx","App.jsx","serviceWorker.js","utils/history.jsx","index.jsx"],"names":["DEFAULT_REDIRECT_CALLBACK","window","history","replaceState","document","title","location","pathname","Auth0Context","React","createContext","useAuth0","useContext","NavBar","_useAuth","isAuthenticated","loginWithRedirect","logout","react_default","a","createElement","className","onClick","App","loading","components_NavBar","Boolean","hostname","match","createBrowserHistory","ReactDOM","render","_ref","children","_ref$onRedirectCallba","onRedirectCallback","initOptions","Object","objectWithoutProperties","_useState","useState","_useState2","slicedToArray","setIsAuthenticated","_useState3","_useState4","user","setUser","_useState5","_useState6","auth0Client","setAuth0","_useState7","_useState8","setLoading","_useState9","_useState10","popupOpen","setPopupOpen","useEffect","_ref2","asyncToGenerator","regenerator_default","mark","_callee","auth0FromHook","_ref3","appState","_user","wrap","_context","prev","next","createAuth0Client","sent","search","includes","handleRedirectCallback","getUser","stop","apply","this","arguments","initAuth0","loginWithPopup","_ref4","_callee2","params","_args2","_context2","length","undefined","t0","console","error","finish","_ref5","_callee3","_context3","Provider","value","getIdTokenClaims","getTokenSilently","getTokenWithPopup","domain","config","client_id","clientId","redirect_uri","origin","push","targetUrl","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.29559e92.chunk.js","sourcesContent":["// src/react-auth0-spa.js\nimport React, { useState, useEffect, useContext } from \"react\";\nimport createAuth0Client from \"@auth0/auth0-spa-js\";\n\nconst DEFAULT_REDIRECT_CALLBACK = () =>\n  window.history.replaceState({}, document.title, window.location.pathname);\n\nexport const Auth0Context = React.createContext();\nexport const useAuth0 = () => useContext(Auth0Context);\nexport const Auth0Provider = ({\n  children,\n  onRedirectCallback = DEFAULT_REDIRECT_CALLBACK,\n  ...initOptions\n}) => {\n  const [isAuthenticated, setIsAuthenticated] = useState();\n  const [user, setUser] = useState();\n  const [auth0Client, setAuth0] = useState();\n  const [loading, setLoading] = useState(true);\n  const [popupOpen, setPopupOpen] = useState(false);\n\n  useEffect(() => {\n    const initAuth0 = async () => {\n      const auth0FromHook = await createAuth0Client(initOptions);\n      setAuth0(auth0FromHook);\n\n      if (\n        window.location.search.includes(\"code=\") &&\n        window.location.search.includes(\"state=\")\n      ) {\n        const { appState } = await auth0FromHook.handleRedirectCallback();\n        onRedirectCallback(appState);\n      }\n\n      const isAuthenticated = await auth0FromHook.isAuthenticated();\n\n      setIsAuthenticated(isAuthenticated);\n\n      if (isAuthenticated) {\n        const user = await auth0FromHook.getUser();\n        setUser(user);\n      }\n\n      setLoading(false);\n    };\n    initAuth0();\n    // eslint-disable-next-line\n  }, []);\n\n  const loginWithPopup = async (params = {}) => {\n    setPopupOpen(true);\n    try {\n      await auth0Client.loginWithPopup(params);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setPopupOpen(false);\n    }\n    const user = await auth0Client.getUser();\n    setUser(user);\n    setIsAuthenticated(true);\n  };\n\n  const handleRedirectCallback = async () => {\n    setLoading(true);\n    await auth0Client.handleRedirectCallback();\n    const user = await auth0Client.getUser();\n    setLoading(false);\n    setIsAuthenticated(true);\n    setUser(user);\n  };\n  return (\n    <Auth0Context.Provider\n      value={{\n        isAuthenticated,\n        user,\n        loading,\n        popupOpen,\n        loginWithPopup,\n        handleRedirectCallback,\n        getIdTokenClaims: (...p) => auth0Client.getIdTokenClaims(...p),\n        loginWithRedirect: (...p) => auth0Client.loginWithRedirect(...p),\n        getTokenSilently: (...p) => auth0Client.getTokenSilently(...p),\n        getTokenWithPopup: (...p) => auth0Client.getTokenWithPopup(...p),\n        logout: (...p) => auth0Client.logout(...p)\n      }}\n    >\n      {children}\n    </Auth0Context.Provider>\n  );\n};\n","// src/components/NavBar.js\n\nimport React from \"react\";\nimport { useAuth0 } from \"../react-auth0-spa\";\n\nconst NavBar = () => {\n  const { isAuthenticated, loginWithRedirect, logout } = useAuth0();\n\n  return (\n    <div>\n      {!isAuthenticated && (\n        <button className=\"ui button\" onClick={() => loginWithRedirect({})}>\n          Log in\n        </button>\n      )}\n\n      {isAuthenticated && (\n        <button className=\"ui button\" onClick={() => logout()}>\n          Log out\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default NavBar;\n","// src/App.js\n\nimport React from \"react\";\nimport NavBar from \"./components/NavBar\";\nimport { useAuth0 } from \"./react-auth0-spa\";\n\nfunction App() {\n  const { loading } = useAuth0();\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div className=\"App\">\n      <header>\n        <NavBar />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// src/utils/history.js\n\nimport { createBrowserHistory } from \"history\";\nexport default createBrowserHistory();\n","// src/index.js\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Auth0Provider } from \"./react-auth0-spa\";\nimport config from \"./auth_config.json\";\nimport history from \"./utils/history\";\n\nconst onRedirectCallback = appState => {\n  history.push(\n    appState && appState.targetUrl\n      ? appState.targetUrl\n      : window.location.pathname\n  );\n};\n\nReactDOM.render(\n  <Auth0Provider\n    domain={config.domain}\n    client_id={config.clientId}\n    redirect_uri={window.location.origin}\n    onRedirectCallback={onRedirectCallback}\n  >\n    <App />\n  </Auth0Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}